
컴포넌트를 반복하는 경우에는 map 함수를 사용한다.
map 는 새로운 배열 요소를 반환하기 때문에 변화 감지에 효과적이다.

map 을 통해 반복을 하다보면, key 관련된 'Warning' 을 발견할 수 있다.
key 는 React 에서 컴포넌트 배열에 대한 변화 감지를 효율적으로 하기 위한 수단이다.
key 가 없으면 순차적으로 변화감지를 하지만, key 가 있는 경우 해당 key 를 이용해서 변화 감지를 수행한다.
key 값도 고유 값 형태로 설정하는 것 좋다.



[IterationSample.js]

import React, { useState } from 'react';

const IterationSample = () => {
    const [names, setNames] = useState([
        { id: 1, text: '눈사람' },
        { id: 2, text: '얼음' },
        { id: 3, text: '눈' },
        { id: 4, text: '바람' },
    ]);
    const [inputText, setInputText] = useState('');
    const [nextId, setNextId] = useState(5);

    const onChange = (e) => {
        setInputText(e.target.value);
    }

    const onClick = () => {
        const newNames = names.concat({
            id: nextId,
            text: inputText
        });

        setNames(newNames);
        setNextId(nextId + 1);
        setInputText('');
    }

    const onRemove = (id) => {
        const newNames = names.filter((name) => name.id !== id);
        setNames(newNames);
    }

    const namesList = names.map((name) => (
        <li key={name.id} onDoubleClick={() => onRemove(name.id)}>
            {name.text}
        </li>
    ));

    return (
        <>
            <input
                type='text'
                value={inputText}
                onChange={onChange}
            />
            <button onClick={onClick}>Add</button>
            <ul>{namesList}</ul>
        </>
    );
};

export default IterationSample;



[IterationSample.js] - Custom Version

import React, { useState } from 'react';

const IterationSample = () => {

    const [names, setNames] = useState([
        {id: 1, text: "A"}
        , {id: 2, text: "B"}
        , {id: 3, text: "C"}
        , {id: 4, text: "D"}
    ]);

    const [inputText, setInputText] = useState('');

    const onChange = (e) => setInputText(e.target.value);
    const onClick = (e) => {
        // let newNames = [...names, {id: names.length+1, text: inputText}];
        let newNames = names.concat({
            id: names.length + 1
            , text: inputText
        })
        setNames(newNames);
        setInputText('');
    }
    const onRemove = (id) => {
        let newNames = names.filter((name) => (name.id !== id));
        setNames(newNames);
    }
    
    const namesList = names.map((name) => (
        <li key={name.id} onDoubleClick={() => onRemove(name.id)}>
            {name.text}    
        </li>
    ));

    return (
        <>
            <input value={inputText} onChange={onChange}/>
            <button onClick={onClick}>Add</button>
            <ul>
                {namesList}
            </ul>
        </>
    );
};

export default IterationSample;