리액트는 변경이 일어난 DOM 을 효율적으로 그리기 위해, 모두 지우고 다시 그리는 방식을 기본 베이스로 한다.
( 하지만, 위 방식은 메모리, CPU 점유 등 문제가 발생 )

■ Rendering

리액트는 View 만 신경 쓰는 라이브러리이다.
리액트는 컴포넌트 단위로 움직이고, 렌더링 과정이 '초기 렌더링' 과 '리렌더링' 과정으로 이루어진다.

1. 초기 렌더링

  render 함수는 해당 컴포넌트의 정보를 객체형태로 반환한다.
  컴포넌트들은 내부에 있는 컴포넌트 등에 대해 재귀적으로 렌더링을 발생하고, 해당 정보를 통해 HTML 을 만들고 이를 DOM 에 주입하는 방식이다.

2. 조회 과정

  데이터에 변화가 발생하면, 해당 View 를 업데이트 하는것이 아닌, '새로운 요소' 로 갈아끼운다.
  컴포넌트에 데이터가 업데이트 되면, render 가 호출되고 이 때, 이전 정보와 비교가 발생한다.
  변경이 발생한 부분에 대한 DOM 트리만 업데이트가 발생한다.


■ Virtual DOM

리액트의 주요 특징은, Virtual DOM 이다.

우선, DOM 의 치명적인 단점은 동적 UI 에 최적화되어 있지 않다는 점이다.
HTML DOM 자체는 정적이고, JS 를 통해서 동적으로 만들고 있다.

최신 애플리케이션에서는 스크롤에 따른 수많은 데이터가 로딩되는데, DOM 을 통해 업데이트를 발생하려면 브라우저 단에서 CSS 재 연산, Layout 구성 등 앞에서 동작해야하는 시간 소요가 발생한다.

따라서, DOM 에 대한 업데이트를 최소한으로 하기위해, Virtual DOM 을 통해 업데이트를 추상화해서 사용한다.


동작 방식은 아래와 같다.

 (1) 데이터 업데이트에 대한 전체 UI 를 Virtual DOM 에 리렌더링
 (2) 현재 View 와 비교 후, 변경된 부분만 실제 DOM 에 적용


Virtual DOM 방식은 업데이트가 빈번하게 발생하는데 효과적이다.
단순 정적 라우팅 정도의 경우, 오히려 일반적인 방식이 더 효과적일 수 있다.



※ React 는 라이브러리이다!! ( 프레임워크가 아니다 )
   공식 문서 상에도 대놓고 Library 라고 명시되어 있다.




해당 책에서는 yarn 을 사용하고 있다.
yarn create react-app hello-react

yarn start  # 실행



