1. CSS

2. Sass

CSS 전처리기 / sass, scss 확장자
node-sass 로 Sass -> css 로 변환해주는 라이브러리

sass 는 CSS 의 전처리기 이기 때문에 웹에서 단독으로 적용될 수 없다.
따라서, Convert 가 필요한데 대표적으로 위에서 언급한 node-sass 라이브러리이다.

https://heropy.blog/2018/01/31/sass/

※ 설치하지 않고 실행하면 오류 발생


Sass 에서 사용하는 일부 공통된 변수나 모듈을 utils 로 아래와 같이 뽑을 수 있다.


[utils.scss]
$red: #fa5252;
$orange: #fd7e14;
$yellow: #fcc419;
$green: #40c057;
$blue: #339af0;
$indigo: #5c7cfa;
$violet: #7950f2;

@mixin square($size) {
    $calculated: 32px * $size;
    width: $calculated;
    height: $calculated;
}


[SassComponent.scss]

@import './styles/utils.scss';

.SassComponent {
    display: flex;
    background: red;
    
    
    .box {
      background: red; // 일반 CSS 에선 .SassComponent .box 와 마찬가지
      cursor: pointer;
      transition: all 0.3s ease-in;
      &.red {
        // .red 클래스가 .box 와 함께 사용 됐을 때
        background: $red;
        @include square(1);
      }
      &.orange {
        background: $orange;
        @include square(2);
      }
      &.yellow {
        background: $yellow;
        @include square(3);
      }
      &.green {
        background: $green;
        @include square(4);
      }
      &.blue {
        background: $blue;
        @include square(5);
      }
      &.indigo {
        background: $indigo;
        @include square(6);
      }
      &.violet {
        background: $violet;
        @include square(7);
      }
      &:hover {
        // .box 에 마우스 올렸을 때
        background: black;
      }
    }
}


이런 구조는 폴더 구조가 복잡해지면, 경로상에 어려움을 가지고 올수 있다. ( ../../styles/utils/ )
이런 어려움은 sass-loader 를 커스터마이징 해서 해결할 수 있다.

create-react-app 의 세부 설정을 외부로 꺼내야 한다.
yarn eject 명령어를 수행하면, config 폴더가 생성되고 안에 webpact.config.js 등의 설정 파일이 있다.


이 후, 아래 부분을 찾아 아래와 같이 수정해 준다.
해당 설정은, scss 파일 경로와 상관 없이 무조건 디렉터리 기준 절대 경로로 인식하게 해준다.
{
  test: sassRegex,
  exclude: sassModuleRegex,
  use: getStyleLoaders(
    {
      importLoaders: 3,
      sourceMap: isEnvProduction
        ? shouldUseSourceMap
        : isEnvDevelopment,
      modules: {
        mode: 'icss',
      },
    },
    'sass-loader'
  ),
  // Don't consider CSS imports dead code even if the
  // containing package claims to have no side effects.
  // Remove this when webpack adds a warning or an error for this.
  // See https://github.com/webpack/webpack/issues/6571
  sideEffects: true,
},


{
  test: sassRegex,
  exclude: sassModuleRegex,
  use: getStyleLoaders(
    {
      importLoaders: 3,
      sourceMap: isEnvProduction
        ? shouldUseSourceMap
        : isEnvDevelopment,
      modules: {
        mode: 'icss',
      },
    }).concat({
      loader: require.resolve('sass-loader'),
      options: {
        sassOptions: {
          includePaths: [paths.appSrc + '/styles']
        },
        sourceMap: isEnvProduction && shouldUseSourceMap
      }
    }),
  // Don't consider CSS imports dead code even if the
  // containing package claims to have no side effects.
  // Remove this when webpack adds a warning or an error for this.
  // See https://github.com/webpack/webpack/issues/6571
  sideEffects: true,
},


이후, [@import 'utils.scss'] 로 고쳐도 정상 동작하는 것을 확인할 수 있다.
만약, 이후 기본으로 'utils.scss' 를 포함하게 하려면, sourceMap 부분 아래 해당 옵션을 추가해주면 된다.

...
sourceMap: isEnvProduction && shouldUseSourceMap
prependData: `import 'utils';`
...



Sass 의 장점은 외부 라이브러리를 쉽게 사용할 수 있다는 점이다.

※ node_modules 경로를 무조건 접근하는 방법
   폴더 구조가 복잡해지면, ../../node_modules/(...)/(...) 이런 식으로 접근해야한다.
   이를 무조건 node_modules 아래로 인식하게 하는 방법은 ~/(...)/(...) 로 사용하면 된다.
  @import ~highcharts/...



예시로는 2가지 라이브러리를 사용하고 있다.
반응형 디자인 관련 (include-media)
색상 팔레트 (open-color)


yarn add open-color include-media


[utils.scss]
@import '~includes-media/dist/include-media';
@import '~open-color/open-color';


[SassComponent.scss]
@import 'utils.scss';

.SassComponent {
    display: flex;
    background: $oc-gray-2;
    (....)
}

※ include-media/dist/include-media 부분은 안됨



3. CSS Module


CSS Module 은 class 이름이 중첩되는 현상을 방지하기 위한 기술이다.
[파일이름]_[클래스 이름]_[해시값] 형태로 생성됨

구 버전에서는 css-loader 를 별도 설정해야 했지만, v2 이상 부터는 .module.css 확장자로 설정하면, CSS_Module 이 적용된다.


[CSSModule.module.css]

.wrapper {
    background: black;
    padding: 1rem;
    color: white;
    font-size: 2rem;
}

/* Global CSS */
:global .something {
    font-weight: 800;
    color: aqua;
}

[CSSModule.js]
import React from 'react';
import styles from './CSSModule.module.css';

const CSSModule = () => {
    return (
        <div className={styles.wrapper}>
            Hello I'm <span className='something'>CSS Module</span>
        </div>
    );
};

export default CSSModule;



여러 개의 CSS class 를 사용하고자 한다면 아래와 같이 명시하면 된다.
<div className={`${styles.wrapper} ${styles.inverted}`}>
or
<div className={[styles.wrapper, styles.inverted].join('')}>


변환된 Class Name 을 확인해보면, 아래와 같이 나타나는 것을 확인할 수 있다.
<div class="CSSModule_wrapper__yT4z- CSSModule_inverted__WZ025">



classnames 는 CSS 클래스를 조건부로 설정할 때, 편리한 라이브러리이다.

yarn add classnames

ex)
classnames('a', 'b');
classnames('a', {b : true});
classnames('a', {b : false});
classnames('a', ['b', 'c']);


[CSSModule.js]

import React from 'react';
import styles from './CSSModule.module.css';
import classnames from 'classnames/bind';

const cx = classnames.bind(styles);

const CSSModule = () => {
    return (
        // <div className={`${styles.wrapper} ${styles.inverted}`}>
        //     Hello I'm <span className='something'>CSS Module</span>
        // </div>
        <div className={cx('wrapper', 'inverted')}>
            Hello I'm <span className='something'>CSS Module</span>
        </div>
    );
};

export default CSSModule;


sass 도 확장자만 바꾸면 동일한다.
CSSModule.module.scss



4. styled-components

JS 파일 안 스타일을 선언하는 방식 ( CSS in JS )
많은 라이브러리 중 styled-components 가 대표적이다.

yarn add styled-component


이 라이브러리는 컴포넌트 소스 안에서 스타일링이 가능하기 때문에 별도의 css, sass 등을 생성하지 않아도 된다.



[StyledComponents.js]

import React from 'react';
import styled, { css } from 'styled-components';

const Box = styled.div`
    background: ${props => props.color || 'blue'};
    padding: 1rem;
    display: flex;
`;

const Button = styled.button`
    background: white;
    color: black;
    border-radius: 4px;
    padding: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
    font-size: 1rem;
    font-weight: 600;
    
    &:hover {
        background: rgba(255, 255, 255, 0.9);    
    }

    ${props => props.inverted && css`
        background: none;
        border: 2px solid white;
        color: white;
        &:hover {
            background: white;
            color: black;
        }
    `};

    & + button {
        margin-left: 1rem;
    }
`;


const StyledComponents = () => (
    <Box color='black'>
        <Button>Hello</Button>
        <Button inverted={true}>Only Border</Button>
    </Box>
);


export default StyledComponents;


※ 위 예시를 사용하면, 아래와 같은 Waraning 이 발생하게 된다.
Warning: Received `true` for a non-boolean attribute `inverted`.

이는 DOM Attribute 에 문자열로 넣으라는 소리다.
아래와 같이 변경해주면 된다.

${props => props.inverted && css`(...)`}

<Button inverted={"true"}>Only Border</Button>


※ VS Code 에서 확장 프로그램으로 vscode-styled-component 를 설치하면 편리하다.


여기서 `` 로 사용하는 문법은 Tagged 템플릿 리터럴이다.
일반적인 리터럴 문법과 다른 점은 객체 등을 온전히 가지고 온다는 점이다.

일반에서는 [object Object] 라는 문자열로 변환되는데,
Tageed 에서는 온전하게 가지고 온다.

ex) `hello ${ {code: 'A'} }`    // hello [object Object]



styled() 를 통해서 DOM 이나 컴포넌트를 명시할 수 있다.
ex)
styled('input')
styled(MyCom)

const MyInput = styled('input')`
  color: red;
`


보통 CSS 에서 반응형을 설정할 때, @media query 를 사용한다.
여기서도 큰 차이는 없지만, 해당 작업을 반복할 때, 함수화를 할 수 있어서 반복을 줄일 수 있다.


[StyledComponents.js]
const sizes = {
    desktop: 1024,
    tablet: 768
}

const media = Object.keys(sizes).reduce((acc, label) => {
    acc[label] = (...args) => css`
        @media (max-width: ${sizes[label] / 16}em) {
            ${css(...args)}
        }
    `;

    return acc;
}, {});

const Box = styled.div`
    background: ${props => props.color || 'blue'};
    padding: 1rem;
    display: flex;
    width: 1024px;
    margin: 0 auto;
    ${media.desktop`width: 768px`}
    ${media.tablet`width: 100%`}
`;    