create react-app 을 통해서 만들어진 프로젝트는 웹팩 번들러를 기본으로 사용한다. ( index.js 를 기본으로 번들링된다. )
css-loader, babel-loader 등에 대한 웹팩 로더가 기본적으로 설치된다.



JSX 는 코드가 번들링되는 과정에서 Babel 을 사용해 JS 형태의 코드로 변환된다.



책의 ReactDOM.render() 방식이 아래와 같이 변경되었다.

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);


React 에서 컴포넌트의 반환값으로는 무조건 하나의 DOM 형태로 감싸서 반환해야한다.
Virtual DOM 에서 변화를 보다 효율적으로 감지하기 위함이다.

<Fragment>, <> 으로도 가능하다.
※ div 태그가 실제 생성되는 여부가 다르다.
  <div> : 실제로 렌더링 된 결과도 <div id="root"><div>abc</div></div>
  <Fragment> : 렌더링 결과는 root 아래 div 태그가 생성되지 않는다. <div id="root">abc</div>



{} 을 통해 JSX 내부에서 자바스크립트 문법을 사용 가능하다.  ex) <div>{name}</dvi>
if 을 사용할 수 없고, 조건부 연산자를 통해서 처리해야 한다.

<div> 내부에 null 을 반환하면, 아무것도 보이지 않는다.
또한, false 로 반환해도 null 과 같이 인식하기 때문에 아래와 같은 구문이 가능하다. ( 0 은 표현됨 )

const name = 'not';

<div>{name === 'react'  ? <h1>Hello</h1> : null}</div>
<div>{name === 'react'  && <h1>Hello</h1>}</div>

 => 둘 다, 아무것도 표현하지 않는다.


(책 기준) undefined 된 변수를 return 시 오류가 발생한다.
현재 기준으로는 undefined 를 반환해도 빈 화면으로 자동으로 출력된다. ( 오류 X )


function App() {
  const name = undefined;
  return name;
}

export default App;



inline style 의 경우, DOM style 속성에 Object 형태의 값을 매핑하면 된다.
※ DOM 에 직접 붙일 때, JSX 의 JS 문법인 {} 와 Object 타입을 혼동하지 않게 주의하자


function App() {
  const name = '리액트';
  const style = {
    color: 'red',
    backgroundColor: 'black'
  };

  return (
    <div style={style}>
      {name}
    </div>
  )
}

export default App;


class 대신 className 을 사용하자

주석은 JS {} 안에 작성해야 View 상에 표현되지 않는다.



ESLint 문법 검사 도구
Prettier 코드 정리 도구 ( .prettierrc )







