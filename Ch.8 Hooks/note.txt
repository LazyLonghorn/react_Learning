1. useState

컴포넌트의 state 를 설정하는 Hooks
const [value, setValue] = useState(0)


2. useEffect

컴포넌트가 렌더링 될 때마다, 특정 동작을 발생시키는 Hooks
componentDidMount + componentDidUpdate 가 합쳐진 형태

■ useEffect(func, deps?)

deps가 없는 경우, 리렌더링 시에 동작함
deps 에 해당하는 항목에 대한 값이 변경될 때, function 이 수행됨.

useEffect(() => {
    console.log("Name : " + name);
}, [name])


빈 배열의 경우, Mounting 과정에서만 수행됨.



■ cleanup Function (마무리 동작)

useEffect 는 기본적으로 렌더링된 직후 실행된다.
cleanup 함수의 경우, 언마운트나 업데이트 직전에 호출된다. 

useEffect(() => {
    console.log("Mount or Update");
    console.log("U Name : " + name);
    return () => { 
        console.log('Clean up'); 
        console.log("Clean Name : " + name);
    };
}, [name])


위의 예시를 확인해보면, 처음 렌더링 될때, Name(U) 의 값을 표현하고
name 을 변경하면, Name(C : 이전 값) 을 표현하고 다시 Name(U : 신규 입력된 값) 으로 표시된다.
해당 컴포넌트가 Unmount 되면, C 만 출력된다.
(cleanup 동작에서 이전 값이 표현되는 이유는 업데이트 직전에 발생하기 때문)


만약 Unmount 의 경우만 Clean 하고 싶다면, 아래와 같이 dep 항목을 빈 배열로 설정

useEffect(() => {
    console.log("Mounted");
    return () => { 
        console.log("Unmounted"); 
    }
}, [])



3. useReducer

useState 보다 다양한 상황에 state 를 변경할 수 있도록 지원하는 Hooks
reducer 는 현재 상태, 업데이트를 위한 액션 값을 전달 받아 상태를 변경
이 때, 새로운 상태는 불변성을 지켜야 한다.


■ useReducer(reducer, defaultValue)

useReducer 는 reducer 함수와 기본값을 파라미터로 넣는다.
반환하는 것은 state, dispatch 함수이다.  ( dispatch 는 액션을 실행하는 함수이다. )
dispatch 를 통해 액션에 따른 기능을 구현할 수 있다.

useReducer 에서 장점 중 하나가 업데이트 로직을 컴포넌트 밖으로 정의 할 수 있다는 점이다.


[Counter.tsx]

import React, { useReducer } from 'react';

function reducer(state: any, action: any) {
    // action type 에 따라 작업 수행
    switch(action.type) {
        case 'INCREMENT':
            return {value: state.value + 1}
        case 'DECREMENT':
            return {value: state.value - 1}
        default:
            return state;
    }
}

const Counter = () => {
    const [state, dispatch] = useReducer(reducer, {value: 0});

    return (
        <>
            <p>Now Count: <b>{state.value}</b></p>
            <button onClick={() => {dispatch({ type: 'INCREMENT' })}}>INCREMENT</button>
            <button onClick={() => {dispatch({ type: 'DECREMENT' })}}>DECREMENT</button>
        </>
    );
};

export default Counter;


[Info.tsx]
import React, { useEffect, useReducer, useState } from 'react';

function reducer(state: any, action: any) {
    debugger
    let changeValue = {
        ...state,
        [action.name]: action.value
    };

    return changeValue;
}

const Info = () => {
    const [state, dispatch] = useReducer(reducer, {name: '', nickname: ''});
    const {name, nickname} = state;

    const onChange = (e: any) => {
        dispatch(e.target);
    }

    return (
        <>
            <input name='name' value={name} onChange={onChange}/>
            <input name='nickname' value={nickname} onChange={onChange}/>

            <div>
                <div>
                    <b>Name : </b>{name}
                </div>
                <div>
                    <b>Nickname : </b>{nickname}
                </div>
            </div>
        </>
    );
};

export default Info;


4. useMemo
컴포넌트 내부에서 발생하는 연산을 최적화 하는 Hooks


useMemo 의 memo 는 memoization 의모로 '메모리에 넣기' 라는 의미를 지닌다.
함수형 컴포넌트는 [렌더링 => 컴포넌트 함수 호출 => 모든 내부 변수 초기화] 과정을 거친다.
(컴포넌트 함수: UI 를 렌더링하는 함수(return))

때문에 렌더링이 발생하면 변수를 초기화 과정이 수행되기 때문에 아래 예시의 경우, 무조건 getAverage 가 호출되는 것이다.
따라서, useMemo 로 [avg] 변수를 구성하는 과정을 메모리에 넣음으로써 값이 변하지 않으면 메모리에 있는 값을 그대로 사용하는 것이다.

(※ https://velog.io/@jinyoung985/React-useMemo%EB%9E%80)

■ useMemo(Function, deps?)


[Average.tsx]
import React, { useState } from 'react';

const getAverage = (numbers: Array<number>) => {
    console.log('getAverage Run ...');
    if(numbers.length === 0) return 0;
    const sum = numbers.reduce((a, b) => a + b);
    return sum / numbers.length;
}
const Average: React.FC = () => {
    const [list, setList] = useState<Array<number>>([]);
    const [number, setNumber] = useState('');

    const onChange = (e: any) => {
        setNumber(e.target.value);
    }
    const onInsert = (e: any) => {
        let newList = list.concat(parseInt(number));

        setList(newList);
        setNumber('');
    }

    return (
        <div>
            <input value={number} onChange={onChange}/>
            <button onClick={onInsert}>Add</button>
            <ul>
                {list.map((value, idx) => 
                    <li key={idx}>{value}</li>
                )}
            </ul>
            <div><b>Average : {getAverage(list)}</b></div>
        </div>
    );
};

export default Average;


useMemo 적용한 경우

[Average.tsx]
import React, { useEffect, useMemo, useState } from 'react';

const getAverage = (numbers: Array<number>) => {
    console.log('getAverage Run ...');
    if(numbers.length === 0) return 0;
    const sum = numbers.reduce((a, b) => a + b);
    return sum / numbers.length;
}
const Average: React.FC = () => {
    const [list, setList] = useState<Array<number>>([]);
    const [number, setNumber] = useState('');

    const onChange = (e: any) => {
        setNumber(e.target.value);
    }
    const onInsert = (e: any) => {
        let newList = list.concat(parseInt(number));

        setList(newList);
        setNumber('');
    }

    const avg = useMemo(() => (getAverage(list)), [list]);
    
    return (
        <div>
            <input value={number} onChange={onChange}/>
            <button onClick={onInsert}>Add</button>
            <ul>
                {list.map((value, idx) => 
                    <li key={idx}>{value}</li>
                )}
            </ul>
            <div><b>Average : {avg}</b></div>
        </div>
    );
};

export default Average;



※ 아래 방식도 유사하게 동작함

[Average.tsx]
import React, { useEffect, useState } from 'react';
const getAverage = (numbers: Array<number>) => {
    console.log('getAverage Run ...');
    if(numbers.length === 0) return 0;
    const sum = numbers.reduce((a, b) => a + b);
    return sum / numbers.length;
}
const Average: React.FC = () => {
    const [list, setList] = useState<Array<number>>([]);
    const [number, setNumber] = useState('');

    // let avg = 0;
    const [avg, setAvg] = useState(0);


    const onChange = (e: any) => {
        setNumber(e.target.value);
    }
    const onInsert = (e: any) => {
        let newList = list.concat(parseInt(number));

        setList(newList);
        setNumber('');
    }

    // const avg = getAverage(list)
    useEffect(() => {
        setAvg(getAverage(list))
    }, [list])

    return (
        <div>
            <input value={number} onChange={onChange}/>
            <button onClick={onInsert}>Add</button>
            <ul>
                {list.map((value, idx) => 
                    <li key={idx}>{value}</li>
                )}
            </ul>
            <div><b>Average : {avg}</b></div>
        </div>
    );
};

export default Average;



5. useCallback

useMemo 와 유사한 개념으로 useMemo 는 함수에서 반환된 값을 메모리에 저장하는 개념이라면,
useCallback 은 함수 자체를 메모리에 저장하는 개념이다.

const onChange = useCallback(e => {
    setNumber(e.target.value);
}, []);

const onInsert = useCallback(e => {
    const nextList = list.concat(parseInt(number));
    setList(nextList);
    setNumber('');
}, [number, list]);

함수에서 사용한 항목들을 의존성에 명시해야함
( list, number 를 통해서 값을 조회하고 있음 -> 의존된 항목들이 변경되면, 다시 함수를 정의해야하기 때문에 )


6. useRef

ref 사용을 위한 Hooks (Ch.5 Ref) Note 참고


7. Custom Hook

Custom Hook 은 naming 규칙이 소문자 시작이 보편적.
 



