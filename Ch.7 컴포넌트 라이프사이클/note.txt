※ 아래 과정에서 사용되는 함수는 클래스형 컴포넌트에서만 적용된다.
   라이프 사이클이 클래스형에서만 사용되는 기능이기 때문 ( 함수형에서는 Hooks 를 사용해야 함 )

컴포넌트의 라이프 사이클은 3 가지로 분류된다.

  # Mount
  # Update
  # UnMount

1) Mount

  DOM 이 생성되고 브라우저 상에 rendering 되는 과정을 의미한다.
  
  # 호출 순서
  constructor
  getDerivedStateFromProps : props 값을 state 에 넣을 때 사용
  render
  componentDidMount : 브라우저에 rendering 된 후


(1) redner
DOM 의 정보를 가져오거나 state 변경을 주고자 한다면, componentDidMount 에서 진행해야 한다.

(2) getDerivedStateFromProps
prorps 값을 state 와 동기화 하기 위한 용도

static getDerivedStateFromProps(nextProps, prevState) {
    if(nextProps.value !== prevState.value) {
        return { value : nextProps.value };
    }
    return null;	// state 변경 X
}

(3) componentDidMount 
이벤트 등록, setTimeout, setInterval, 네트워크 요청 등과 같은 비동기 작업을 주로 처리





2) Update

  Update 되는 경우는 4가지
  
   # props 변경
   # state 변경
   # 부모가 리렌더링 될때
   # this.forceUpdate 호출


  # 호출 순서
getDerivedStateFromProps : props 값을 state 에 넣을 때 사용 ( Mount 에서도 진행 )
shouldComponentUpdate : 리렌더링 할 여부를 결정 ( true, false 반환 / false 의 경우, 아래 과정이 호출되지 않음 / this.forceUpdate 의 경우, 해당 과정이 진행되지 않음 )
render
getSnapshotBeforeUpdate : DOM 에 반영하기 전 호출 함수
componentDidUpdate : 컴포넌트 업데이트 후



(1) shouldComponentUpdate 

현재 props, state 는 this 를 통해 접근 가능하고, 새로 생성될 값은 인자값으로 들어오는 nextProps, nextState 로 접근 가능


(2) getSnapshotBeforeUpdate

주로 실제 반영되기 전의 처리할 동작이나, componentDidUpdate 에서 업데이트 직전에 참고할 값(스크롤 좌표 등) 을 파라미터로 넘기는 역할을 한다.
※ 세 번째 파라미터(snapshot) 로 전달 받을 수 있다. ( return 한 값이 전달됨 )

getSnapshotBeforeUpdate(prevProps, prevState) {
   return { scrollTop, scrollHeight }
}

(3) componentDidUpdate 

componentDidUpdate(prevProps, prevState, snapshot)		// props, state 는 업데이트 이전 값이다.




3) Unmount

componentWillUnMount : Component 가 사라지기 전 호출




※ componentDidCatch

렌더링 도중 오류가 발생하면, Error 화면이 아닌, 오류 화면을 보여주기 위함





[ErrorBoundary.js]
import React, { Component } from 'react';

class ErrorBoundary extends Component {
    state = {
        error: false
    }
    
    componentDidCatch(error, info) {
        this.setState({
            error: true
        });

        console.log({ error, info })
    }

    render() {
        if(this.state.error) {
            return <div>Try Error!</div>
        }

        return this.props.children;
    }
}

export default ErrorBoundary;


[App.js]
<ErrorBoundary>
    <LifeCycleSample color={this.state.color}/>
</ErrorBoundary>


Error 발생 시, 화면이 깜빡이면서 변환된다.





※ this.prop, this.state 구분 주의하자





